/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**************************!*\
  !*** ./src/selector.jsx ***!
  \**************************/
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// --- Inject button into the DOM --- //
var buttonObserverConfig = {
  childList: true,
  subtree: true
};
var buttonObserver = new MutationObserver(injectColorPickerInput);
buttonObserver.observe(document, buttonObserverConfig);
function injectColorPickerInput() {
  // Bordered Container
  var borderedContainer = document.createElement("div");
  borderedContainer.style.border = "1px solid #ccc";
  borderedContainer.style.padding = "10px";
  borderedContainer.style.borderRadius = "5px";
  borderedContainer.style.marginTop = "10px";

  // Label
  var textElement = document.createElement("span");
  textElement.textContent = "HUE Overlay";
  textElement.style.fontFamily = "Courier New, Courier, monospace"; // Set the monospace font
  textElement.style.marginLeft = "4px";
  var containerElement = document.createElement("div");
  containerElement.style.display = "flex";

  // Color Picker Button
  var colorPickerInput = document.createElement("input");
  colorPickerInput.type = "color";
  colorPickerInput.style.margin = "5px";
  colorPickerInput.style.width = "30px";
  colorPickerInput.value = "#4287f5";
  colorPickerInput.addEventListener("change", function (event) {
    var eventWrapperElement = findParentDataEventId(event.target);
    if (eventWrapperElement) {
      var eventId = eventWrapperElement.getAttribute("data-eid");
      var color = event.target.value;
      chrome.storage.sync.set(_defineProperty({}, eventId, color)).then(function () {
        changeEventColor(eventId, color);
      });
    }
  });

  // Clear Button as Image
  var clearButton = document.createElement("img");
  clearButton.src = chrome.runtime.getURL("images/trash16.png");
  clearButton.alt = "Clear";
  clearButton.style.marginTop = "10px";
  clearButton.style.width = "16px";
  clearButton.style.height = "16px";
  clearButton.style.cursor = "pointer";
  clearButton.addEventListener("click", function () {
    var eventWrapperElement = findParentDataEventId(colorPickerInput);
    if (eventWrapperElement) {
      var eventId = eventWrapperElement.getAttribute("data-eid");
      chrome.storage.sync.remove(eventId).then(function () {
        // TODO: find a better way to get back the original color
        location.reload();
      });
    }
  });

  // Append Color Picker and Clear Button to Container
  containerElement.appendChild(colorPickerInput);
  containerElement.appendChild(clearButton);

  // Append Text and Container to Bordered Container
  borderedContainer.appendChild(textElement);
  borderedContainer.appendChild(containerElement);

  // Append Bordered Container to Parent Element
  var parentElement = document.querySelector('[jsname="hklcae"]');
  if (parentElement) {
    if (!parentElement.querySelector("input[type='color']")) {
      parentElement.appendChild(borderedContainer);
    }
  }
}
function hideCheckmarkIcon(parentElement) {
  var existingIconElement = parentElement.querySelector(".google-material-icons.meh4fc.hggPq.lLCaB.M8B6kc.eO2Zfd");
  if (existingIconElement) {
    existingIconElement.className = "google-material-icons meh4fc hggPq lLCaB M8B6kc";
  }
}
function findParentDataEventId(element) {
  while (element && !element.getAttribute("data-eid")) {
    element = element.parentElement;
  }
  return element;
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,